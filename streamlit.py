from PIL import Image 
import streamlit as st
import matplotlib.pyplot as plt
from utils.modelisation import display_complete_modeling
from utils.introduction import display_intro
from utils.exploration import display_exploration
from utils.preprocessing import preprocessing_covid


st.title("Deep X-Vision Project")
st.sidebar.title("Sommaire")
pages=["Introduction", "Exploration", "Preprocessing", "Mod√©lisation", "Resultat", "Analyse et Conclusion"]
page=st.sidebar.radio("Aller vers", pages)
# Sidebar : Informations compl√©mentaires

st.sidebar.markdown("---")  # Ligne de s√©paration
st.sidebar.title("√Ä propos")
st.sidebar.markdown("""
- **Auteurs** : Claudia FABRE, Gilles DOMENC, Romain JILIBERT
- **Promo** : Dec-2024
- **Source des donn√©es** : [COVID-19 Radiography Database (Kaggle)](https://www.kaggle.com/datasets/tawsifurrahman/covid19-radiography-database)
- **Outils** : Streamlit, Python, Scikit-learn, TensorFlow, PyTorch, Matplotlib
""")

if page == pages[0]:
    st.write("### Introduction")
    display_intro()


if page == pages[1]:
    st.write("### Exploration")
    display_exploration()

if page == pages[2]:
    st.write("### Preprocessing")
    preprocessing_covid()

if page == pages[3]:
    st.write("### Modelisation")

    display_complete_modeling()

if page == pages[4]:
    st.write("### R√©sultats") 

    st.markdown("""
    Cette section pr√©sente l'analyse des performances de notre mod√®le de classification des radiographies pulmonaires.
    Nous √©valuerons les r√©sultats √† travers trois outils compl√©mentaires permettant une compr√©hension approfondie 
    des capacit√©s et des limites du mod√®le.
    """)
    
    # Section 1 : Pr√©sentation des m√©triques d'√©valuation
    st.header("1. M√©triques d'√©valuation")
  
    # Initialiser l'√©tat du bouton si n√©cessaire
    if 'show_confusion_matrix' not in st.session_state:
        st.session_state.show_confusion_matrix = False

    # Bouton toggle
    if st.button("**Matrice de confusion**", key="toggle_confusion_matrix_exple"):
        st.session_state.show_confusion_matrix = not st.session_state.show_confusion_matrix

    # Affichage conditionnel
    if st.session_state.show_confusion_matrix:
        st.markdown("""  
        Comme nous l'avons vu, la **matrice de confusion** est un outil fondamental qui permet de :
        - **√âvaluer les performances** du mod√®le de classification en comparant les valeurs pr√©dites aux valeurs r√©elles
        - **Identifier les types d'erreurs** commises par le mod√®le :
            - **Faux n√©gatifs** : cas pathologiques non d√©tect√©s (risque m√©dical √©lev√©)  
            - **Faux positifs** : cas sains incorrectement class√©s comme pathologiques
        - **Comprendre les confusions** entre classes similaires (ex: COVID-19 vs Pneumonie)
        """)
        st.markdown("""
            Lecture de la matrice de confusion ci-dessous :
            - **Faux n√©gatifs** (encadr√© en üü°) : cas pathologiques non d√©tect√©s
            - **Faux positifs** (encadr√© en üî¥) : cas sains incorrectement class√©s comme pathologiques
        """)
        img_path = "images/Exemple Matrice color√©e.png"
        img = Image.open(img_path)
        st.image(img, caption="Matrice de confusion", use_container_width=True)

    #st.markdown("---")

    # Initialiser l'√©tat du bouton si n√©cessaire
    if 'show_f1_details' not in st.session_state:
        st.session_state.show_f1_details = False

    # Bouton pour afficher/masquer les explications
    if st.button("F1-Score", key="toggle_F1_expl"):
        st.session_state.show_f1_details = not st.session_state.show_f1_details

    # Afficher les explications si l'√©tat est True
    if st.session_state.show_f1_details:
        st.markdown("""
        Le **F1-score** repr√©sente la *moyenne harmonique* entre la **Pr√©cision** et le **Rappel** :

        ---
    
        **Pr√©cision** : Rapport entre le nombre de vrais positifs et le nombre total de positifs pr√©dits
        - *Mesure la fiabilit√© des pr√©dictions positives*
        - Formule : `Pr√©cision = VP / (VP + FP)`
    
        **Rappel** : Rapport entre le nombre de vrais positifs et le nombre total de positifs r√©els
        - *Mesure la capacit√© √† d√©tecter tous les cas positifs*
        - Formule : `Rappel = VP / (VP + FN)`
    
        ---

        **F1-Score** : `F1 = 2 √ó (Pr√©cision √ó Rappel) / (Pr√©cision + Rappel)`
    
        Le F1-score est compris entre **0 et 1** :
        - Plus il est proche de **1**, meilleurs sont le Rappel et la Pr√©cision
        - Il est particuli√®rement utile en cas de d√©s√©quilibre des classes
        - En contexte m√©dical, un F1-score √©lev√© garantit un bon compromis entre d√©tection et fiabilit√©
        """)


    # Rappel sur les GradCAM
    # Initialiser l'√©tat du bouton
    if 'show_GradC' not in st.session_state:
        st.session_state.show_GradC = False

    # Bouton pour afficher/masquer les explications
    if st.button("GradCAM", key="toggle_GradCAM_expl"):
        st.session_state.show_GradC = not st.session_state.show_GradC

    # Afficher les explications si l'√©tat est True
    if st.session_state.show_GradC:
        st.markdown("""
        Le **GradCAM** (**Grad**ient-weighted **C**lass **A**ctivation **M**apping) est une technique de visualisation qui r√©v√®le 
        les zones d'une image ayant le plus influenc√© la d√©cision du r√©seau de neurones.

        ##### Interpr√©tation des cartes de chaleur
        - **Zones rouges/chaudes** : R√©gions ayant fortement influenc√© la pr√©diction
        - **Zones bleues/froides** : R√©gions peu ou pas consid√©r√©es par le mod√®le
    """)


    st.markdown("---")
    # Section 2 : Premiers tests CNN vs LeNet, avec et sans 
    st.header("2. Premiers tests CNN vs LeNet, sans et avec masques") 
    # Initialiser l'√©tat du bouton
    if 'show_CNNLN' not in st.session_state:
        st.session_state.show_CNNLN = False

    # Bouton pour afficher/masquer les explications
    if st.button("F1 scores et GradCAM", key="toggle_CNNLN"):
        st.session_state.show_CNNLN = not st.session_state.show_CNNLN

    # Afficher les explications si l'√©tat est True
    if st.session_state.show_CNNLN:
        st.subheader("Premiers F1 scores")
        img_path = "images/F1 CNN LeNet c.png"
        img = Image.open(img_path)
        st.image(img, caption="Comparatif des F1-score d'un CNN classique, d'un LeNet (sans et avec masque)", use_container_width=True)

        st.markdown("""
        Le mod√®le **CNN sans masque a le meilleur F1-score** (94,4 %)...
        """)

        #st.markdown("---")
        #st.subheader("GradCAM CNN sans masque")
        img_path = "images/Grad-CAM CNN No mask.png"
        img = Image.open(img_path)
        st.image(img, caption="GradCAM du CNN sans masque")

        st.markdown("""
        ...malheureusement le Grad-CAM indique que le mod√®le s‚Äôest 
        bas√© ***en-dehors des zones pulmonaires*** et en-dehors des zones p√©riph√©riques des poumons (localisation classique des l√©sions COVID)
        """)
    st.markdown("---")

    st.markdown("### :arrow_forward: Nous avons choisi d'utiliser des r√©seaux de neurones convolutifs (CNN) plus r√©cents qui sont plus profonds et plus efficaces.")

    st.markdown("---")

    # Section 3 : Architecture binaire : COVID vs Non-COVID
    st.header("3. Architecture binaire : COVID vs Non-COVID") 
    st.subheader("Matrice de confusion et F1 score")
    img_path = "images/Matrice - COVID vs all.png"
    img = Image.open(img_path)
    st.image(img, caption="Matrice de confusion - Strat√©gie COVID - Non COVID")

    st.markdown("""
    **F1-score de la classe COVID : 86,7 %**      
  
    """)
    # Initialiser l'√©tat du bouton
    if 'show_confusion_matrixBCNC' not in st.session_state:
        st.session_state.show_confusion_matrixBCNC = False

    # Bouton 
    if st.button("Afficher / Masquer le GradCAM", key="toggle_confusion_GradC1"):
        st.session_state.show_confusion_matrixBCNC = not st.session_state.show_confusion_matrixBCNC

    # Affichage conditionnel
    if st.session_state.show_confusion_matrixBCNC:
        st.markdown("""
            On remarque que les zones qui ont servi aux pr√©dictions sont **bien situ√©es** dans les poumons : pr√®s de la pl√®vre et en bas des poumons.
        """)
        img_path = "images/GradCAM COVID vs All.png"
        img = Image.open(img_path)
        st.image(img, caption="GradCAM COVID vs Non-COVID") #, use_container_width=True)

    st.markdown("---")



    # Section 4 : Architecture √† 2 √©tapes : diff√©rencier les Malades des Non-Malades, puis classifier les Malades
    st.header("4. Architecture √† 2 √©tapes")
    st.subheader("On diff√©rencie d'abord les Malades des Non-Malades, puis on classifie au sein des Malades dans un 2e temps.") 
    st.markdown("---")

    # Initialiser l'√©tat du bouton
    if 'show_confusion_matrix1' not in st.session_state:
        st.session_state.show_confusion_matrix1 = False

    # Bouton 
    if st.button("Matrice de confusion et F1 score", key="toggle_confusion_Mtrx1"):
        st.session_state.show_confusion_matrix1 = not st.session_state.show_confusion_matrix1

    # Affichage conditionnel
    if st.session_state.show_confusion_matrix1:
        img_path = "images/Matrice Malades - Non malades.png"
        img = Image.open(img_path)
        st.image(img, caption="Matrice de confusion - Strat√©gie √† 2 √©tapes : Malades - Non Malades") #, use_container_width=True)
        st.markdown("""
            **F1-score de la classe Malade : 96,2 %**
     """)
        st.markdown("---")


    #st.subheader("Matrice de confusion et F1 score")
    #img_path = "images/Matrice Malades - Non malades.png"
    #img = Image.open(img_path)
    #st.image(img, caption="Matrice de confusion - Strat√©gie √† 2 √©tapes : Malades - Non Malades")
    #st.markdown("""
    #    **F1-score de la classe Malade : 96,2 %**
    #""")
    #st.markdown("---")

    # Section 5.1 :Architecture en 2 √©tapes : mise en concurrence de deux strat√©gies
    st.header("5 :Architecture en 2 √©tapes : mise en concurrence de deux strat√©gies") 
    st.markdown("""
            **Deux** possibilit√©s ont √©t√© envisag√©es :  
            - classification **binaire COVID vs Non-COVID** parmi les Malades
            - classification **multi-classes** (COVID, Pneumonie, Opacit√© pulmonaire) parmi les Malades
    """)
    st.subheader("5.1 Comparaison des matrices de confusion et des F1 scores")


    # Initialiser l'√©tat du bouton
    if 'show_confusion_matrixD' not in st.session_state:
        st.session_state.show_confusion_matrixD = False
    # Bouton 
    if st.button("Afficher / Masquer les matrices de confusion", key="toggle_confusion_matrix51"):
        st.session_state.show_confusion_matrixD = not st.session_state.show_confusion_matrixD

    # Affichage conditionnel
    if st.session_state.show_confusion_matrixD:
        img_path = "images/D Matrices 2e √©tape.png"
        img = Image.open(img_path)
        st.image(img, caption="2e √©tape - Matrices de confusion COVID vs Non-COVID et Multi-classes")

    st.markdown("""
            F1-score, parmi les malades :  
             - classification **binaire COVID vs Non-COVID : 90,1 %**
             - classification **multi-classes : 93,4 %**  

            Au regard des F1-score, **la classification multi-classe s'av√®re plus pertinente que la classification binaire** (et elle permet de diff√©rencier les pathologies).   
            Les F1-score des Pneumonies et des Masses sombres semblent tr√®s bons (99 % et 95,9 %)
    """)
    st.markdown("---")


    # Section 5.2 : Matrice de confusion et F1-score globaux
    st.subheader("5.2 : Matrice de confusion et F1-score globaux") 
    st.markdown("""
            Pour pouvoir √©valuer la performance de la strat√©gie √† 2 √©tapes au regard de la strat√©gie 
            en une seule √©tape COVID - Non COVID, nous avons construit une matrice de confusion globale
            et calcul√© un F1-score. 
            """)
    st.subheader("Comparaison des matrices de confusion et des F1 scores")


    # Initialiser l'√©tat du bouton
    if 'show_confusion_matrixF' not in st.session_state:
        st.session_state.show_confusion_matrixF = False
    # Bouton 
    if st.button("Afficher / Masquer les matrices de confusion", key="toggle_confusion_matrix_global"):
        st.session_state.show_confusion_matrixF = not st.session_state.show_confusion_matrixF

    # Affichage conditionnel
    if st.session_state.show_confusion_matrixF:
        img_path = "images/Matrice - COVID vs all.png"
        img = Image.open(img_path)
        st.image(img, caption="Matrice de confusion - Strat√©gie COVID - Non COVID")

        img_path = "images/Matrice globale.png"
        img = Image.open(img_path)
        st.image(img, caption="Matrice globale - Strat√©gie √† 2 √©tapes, multi classes")

    st.markdown("""
        Le F1-score = 89,8 % de la strat√©gie en 2 √©tape reste meilleur que le F1-score de la classification binaire COVID/Non COVID sans 1√®re √©tape (86,7 %)
    """)
 # Initialiser l'√©tat du bouton
    if 'show_detl_mtrc' not in st.session_state:
        st.session_state.show_detl_mtrc = False
    # Bouton 
    if st.button("D√©tail des calculs de la matrice de confusion globale", key="toggle_dtl_mtrc"):
        st.session_state.show_detl_mtrc = not st.session_state.show_detl_mtrc

    # Affichage conditionnel
    if st.session_state.show_detl_mtrc:
        st.markdown("""               
                     
                     **1. Attribution des cas "Normal" (√âtape 1)**
    
                     Les 1 574 cas pr√©dits comme "Normal" √† l'√©tape 1 (84 faux n√©gatifs + 1 490 
                     vrais n√©gatifs) doivent √™tre attribu√©s √† "Normal" dans la matrice globale,
                     car ils n'ont pas √©t√© soumis √† l'√©tape 2.  
    
                     **2. R√©partition des faux n√©gatifs (84 cas)**  
    
                     Les **84 faux n√©gatifs (class√©s Normal et en r√©alit√© Malade)** doivent √™tre 
                     r√©partis parmi les classes malades (COVID, Lung_Opacity, Viral Pneumonia) 
                     selon leur **proportion r√©elle**.
    
                     Si les 1 646 vrais malades se r√©partissent ainsi :
                    - 40 % COVID (542 cas)
                    - 55 % Lung_Opacity (902 cas)  
                    - 12 % Viral Pneumonia (202 cas)
    
                    Alors les faux n√©gatifs se r√©partissent :
                    - Faux n√©gatifs pour COVID : 33 %
                    - Faux n√©gatifs pour Lung_Opacity : 55 %
                    - Faux n√©gatifs pour Viral Pneumonia : 12 %  

    
                    **3. R√©partition des faux positifs (39 cas)**  
    
                     Les **39 Malades pr√©dits √† tort comme √©tant sains** doivent √™tre r√©partis parmi les classes 
                     **pr√©dites** √† l'√©tape 2 (563 COVID, 879 Lung_Opacity, 204 Viral Pneumonia sur 900) :
                     - Faux positifs pour COVID : 34 %
                     - Faux positifs pour Lung_Opacity : 54 %
                     - Faux positifs pour Viral Pneumonia : 12 %
    
                ---
    
                    **4. Int√©gration de la matrice de l'√©tape 2**
    
                     Les **1 562 malades pr√©dits comme tels** doivent √™tre r√©partis selon la r√©partition de la 
                    2·µâ matrice de confusion (qui se base sur les 1 646 vrais malades de l'√©tape 1).
    
                     **Il faut multiplier la 2·µâ matrice par 1 562 / 1 646 pour l'ins√©rer dans la matrice globale.**
             """)

    st.markdown("---")



if page == pages[5]:
    st.write("### Analyse et Conclusion")


